plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "com.hexagram.febys"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "1.0.8"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    signingConfigs {
        debug {
            def keystoreProperties = getKeystore("debug")
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        release {
            def keystoreProperties = getKeystore("debug")
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug {
            def endpointsProperties = getBuildProperties()
            def credentialsProperties = getCredentials()
            buildConfigField("String", "backendBaseUrl", endpointsProperties['BASE_URL_BACKEND'])
            buildConfigField("String", "webCustomizationBaseUrl", endpointsProperties['BASE_URL_WEB_CUSTOMIZATION'])
            buildConfigField("String", "keycloakClientId", credentialsProperties['KEYCLOAK_CLIENT_ID'])
            buildConfigField("String", "keycloakClientSecret", credentialsProperties['KEYCLOAK_CLIENT_SECRET'])
            resValue "string", "google_web_client", credentialsProperties['GOOGLE_WEB_CLIENT']
            resValue "string", "facebook_app_id", credentialsProperties['FACEBOOK_APP_ID']
            resValue "string", "fb_login_protocol_scheme", credentialsProperties['FACEBOOK_LOGIN_PROTOCOL_SCHEME']
        }
        staging {
            def endpointsProperties = getBuildProperties()
            def credentialsProperties = getCredentials()
            buildConfigField("String", "backendBaseUrl", endpointsProperties['BASE_URL_BACKEND'])
            buildConfigField("String", "webCustomizationBaseUrl", endpointsProperties['BASE_URL_WEB_CUSTOMIZATION'])
            buildConfigField("String", "keycloakClientId", credentialsProperties['KEYCLOAK_CLIENT_ID'])
            buildConfigField("String", "keycloakClientSecret", credentialsProperties['KEYCLOAK_CLIENT_SECRET'])
            resValue "string", "google_web_client", credentialsProperties['GOOGLE_WEB_CLIENT']
            resValue "string", "facebook_app_id", credentialsProperties['FACEBOOK_APP_ID']
            resValue "string", "fb_login_protocol_scheme", credentialsProperties['FACEBOOK_LOGIN_PROTOCOL_SCHEME']
        }
        qa {
            initWith debug

            def endpointsProperties = getBuildProperties()
            def credentialsProperties = getCredentials()
            buildConfigField("String", "backendBaseUrl", endpointsProperties['QA_BASE_URL_BACKEND'])
            buildConfigField("String", "webCustomizationBaseUrl", endpointsProperties['QA_BASE_URL_WEB_CUSTOMIZATION'])
            buildConfigField("String", "keycloakClientId", credentialsProperties['KEYCLOAK_CLIENT_ID'])
            buildConfigField("String", "keycloakClientSecret", credentialsProperties['KEYCLOAK_CLIENT_SECRET'])
            resValue "string", "google_web_client", credentialsProperties['GOOGLE_WEB_CLIENT']
            resValue "string", "facebook_app_id", credentialsProperties['FACEBOOK_APP_ID']
            resValue "string", "fb_login_protocol_scheme", credentialsProperties['FACEBOOK_LOGIN_PROTOCOL_SCHEME']

            applicationIdSuffix ".qa"

            matchingFallbacks = ['debug', 'release']
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            def endpointsProperties = getBuildProperties()
            def credentialsProperties = getCredentials()
            buildConfigField("String", "backendBaseUrl", endpointsProperties['BASE_URL_BACKEND'])
            buildConfigField("String", "webCustomizationBaseUrl", endpointsProperties['BASE_URL_WEB_CUSTOMIZATION'])
            buildConfigField("String", "keycloakClientId", credentialsProperties['KEYCLOAK_CLIENT_ID'])
            buildConfigField("String", "keycloakClientSecret", credentialsProperties['KEYCLOAK_CLIENT_SECRET'])
            resValue "string", "google_web_client", credentialsProperties['GOOGLE_WEB_CLIENT']
            resValue "string", "facebook_app_id", credentialsProperties['FACEBOOK_APP_ID']
            resValue "string", "fb_login_protocol_scheme", credentialsProperties['FACEBOOK_LOGIN_PROTOCOL_SCHEME']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    def ktx_version = "1.6.0"
    implementation "androidx.core:core-ktx:$ktx_version"

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Fragment
    def fragment_version = "1.3.6"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    // pref
    def pref_version = "1.1.1"
    implementation "androidx.preference:preference-ktx:$pref_version"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Coroutines
    def coroutines_version = "1.5.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation 'androidx.hilt:hilt-navigation-fragment:1.0.0'

    // Retrofit
    def retrofit_version = '2.9.0'
    def gson_version = '2.8.7'
    def converter_version = '2.7.2'
    def okhttp_version = '4.9.1'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.retrofit2:converter-gson:$converter_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Pagination
    def paging_version = "3.0.1"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // image library
    def fresco_version = "2.5.0"
    implementation "com.facebook.fresco:fresco:$fresco_version"
    implementation "com.facebook.fresco:animated-gif:$fresco_version"

    // image slider
    def image_slider_version = "1.4.0"
    def slider_version = "4.2"
    implementation "com.github.smarteist:autoimageslider:$image_slider_version"
    implementation "com.tbuonomo:dotsindicator:$slider_version"

    // otp
    def otp_version = "2.1.2"
    implementation "com.github.mukeshsolanki:android-otpview-pinview:$otp_version"

    //sdpi library
    def sdp_lib = '1.0.6'
    implementation "com.intuit.sdp:sdp-android:$sdp_lib"
    implementation "com.intuit.ssp:ssp-android:$sdp_lib"

    // google auth
    def auth_version = "19.2.0"
    implementation "com.google.android.gms:play-services-auth:$auth_version"

    //country code
    implementation 'com.hbb20:ccp:2.5.4'

    // firebase
    def firebase_version = "28.2.0"
    implementation platform("com.google.firebase:firebase-bom:$firebase_version")

    // facebook
    def facebook_version = "5.15.3"
    implementation "com.facebook.android:facebook-android-sdk:$facebook_version"

    // room database
    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // jwt token
    implementation 'com.auth0.android:jwtdecode:2.0.1'

    //crop image
    api 'com.theartofdev.edmodo:android-image-cropper:2.8.0'
}

def getCredentials() {
    def credentials = rootProject.file("credentials.properties")
    def credentialsProperties = new Properties()
    credentialsProperties.load(new FileInputStream(credentials))
    return credentialsProperties
}

def getKeystore(String config) {
    def keystore = rootProject.file("app/keystore/${config}.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystore))
    return keystoreProperties
}

def getBuildProperties() {
    def endpoints = rootProject.file("build.properties")
    def endpointsProperties = new Properties()
    endpointsProperties.load(new FileInputStream(endpoints))
    return endpointsProperties
}